<Shader name="waterShader" autoinit="true" autobind="true">
    <VertexShader>
        <Attrib name="a_vertex" type="vec4" index="0" />
        <Raw>
            <![CDATA[
            #version 130

            #define NUMBERWAVES 4

            const float PI = 3.141592654;
            const float G = 9.81;

            uniform mat4 projectionMatrix;
            uniform mat4 viewMatrix;
            uniform mat3 inverseViewNormalMatrix;

            uniform float passedTime;
            uniform float waterPlaneLength;

            uniform vec4 waveParameters[NUMBERWAVES];
            uniform vec2 waveDirections[NUMBERWAVES];
            
            uniform vec3 cameraPos;

            in vec4 a_vertex;

            out vec3 v_incident;
            out vec3 v_bitangent;
            out vec3 v_normal;
            out vec3 v_tangent;
            out vec2 v_texCoord;

            void main(void)
            {
            vec4 finalVertex;

            finalVertex.x = a_vertex.x;
            finalVertex.y = a_vertex.y;
            finalVertex.z = a_vertex.z;
            finalVertex.w = 1.0;

            vec3 finalBitangent;
            vec3 finalNormal;
            vec3 finalTangent;

            finalBitangent.x = 0.0;
            finalBitangent.y = 0.0;
            finalBitangent.z = 0.0;

            finalNormal.x = 0.0;
            finalNormal.y = 0.0;
            finalNormal.z = 0.0;

            finalTangent.x = 0.0;
            finalTangent.y = 0.0;
            finalTangent.z = 0.0;

            // see GPU Gems: Chapter 1. Effective Water Simulation from Physical Models
            for (int i = 0; i < NUMBERWAVES; ++i)
            {
            vec2 direction = normalize(waveDirections[i]);
            float speed = waveParameters[i].x;
            float amplitude = waveParameters[i].y;
            float wavelength = waveParameters[i].z;
            float steepness = waveParameters[i].w;

            float frequency = sqrt(G * 2.0 * PI / wavelength);
            float phase = speed * frequency;
            float alpha = frequency * dot(direction, a_vertex.xz) + phase * passedTime;

            finalVertex.x += steepness * amplitude * direction.x * cos(alpha);
            finalVertex.y += amplitude * sin(alpha);
            finalVertex.z += steepness * amplitude * direction.y * cos(alpha);
            }

            for (int i = 0; i < NUMBERWAVES; ++i)
            {
            vec2 direction = normalize(waveDirections[i]);
            float speed = waveParameters[i].x;
            float amplitude = waveParameters[i].y;
            float wavelength = waveParameters[i].z;
            float steepness = waveParameters[i].w;

            float frequency = sqrt(G * 2.0 * PI / wavelength);
            float phase = speed * frequency;
            float alpha = frequency * dot(direction, finalVertex.xz) + phase * passedTime;

            // x direction
            finalBitangent.x += steepness * direction.x*direction.x * wavelength * amplitude * sin(alpha);
            finalBitangent.y += direction.x * wavelength * amplitude * cos(alpha);	
            finalBitangent.z += steepness * direction.x*direction.y * wavelength * amplitude * sin(alpha);	
	
            // y direction
            finalNormal.x += direction.x * wavelength * amplitude * cos(alpha);
            finalNormal.y += steepness * wavelength * amplitude * sin(alpha);
            finalNormal.z += direction.y * wavelength * amplitude * cos(alpha);

            // z direction
            finalTangent.x += steepness * direction.x*direction.y * wavelength * amplitude * sin(alpha);
            finalTangent.y += direction.y * wavelength * amplitude * cos(alpha);	
            finalTangent.z += steepness * direction.y*direction.y * wavelength * amplitude * sin(alpha);
            }

            finalTangent.x = -finalTangent.x;
            finalTangent.z = 1.0 - finalTangent.z;
            finalTangent = normalize(finalTangent);

            finalBitangent.x = 1.0 - finalBitangent.x;
            finalBitangent.z = -finalBitangent.z;
            finalBitangent = normalize(finalBitangent);

            finalNormal.x = -finalNormal.x;
            finalNormal.y = 1.0 - finalNormal.y;
            finalNormal.z = -finalNormal.z;
            finalNormal = normalize(finalNormal);

            v_bitangent = finalBitangent;
            v_normal = finalNormal;
            v_tangent = finalTangent;

            v_texCoord = vec2(clamp((finalVertex.x + waterPlaneLength * 0.5 - 0.5) / waterPlaneLength, 0.0, 1.0),
            clamp((-finalVertex.z + waterPlaneLength * 0.5 + 0.5) / waterPlaneLength, 0.0, 1.0));
    
            vec4 vertex = viewMatrix * finalVertex;

            // We calculate in world space
            v_incident = inverseViewNormalMatrix * vec3(vertex);

            gl_Position = projectionMatrix * vertex;
            }
            ]]>
        </Raw>
    </VertexShader>
    <FragmentShader>
        <Raw>
            #version 130

            const float Eta = 0.15; // Water

            uniform samplerCube cubemap;
            uniform sampler2D waterTexture;

            in vec3 v_incident;
            in vec3 v_bitangent;
            in vec3 v_normal;
            in vec3 v_tangent;
            in vec2 v_texCoord;

            out vec4 fragColor;

            vec3 textureToNormal(vec4 orgNormalColor)
            {
            return normalize(vec3(clamp(orgNormalColor.r * 2.0 - 1.0, -1.0, 1.0), clamp(orgNormalColor.g * 2.0 - 1.0, -1.0, 1.0), clamp(orgNormalColor.b * 2.0 - 1.0, -1.0, 1.0)));
            }

            void main(void)
            {
            // The normals stotred in the texture are in object space. No world transformations are yet done.
            vec3 objectNormal = textureToNormal(texture(waterTexture, v_texCoord));

            // These three vectors span a basis depending on the world transformations e.g. the waves.
            mat3 objectToWorldMatrix = mat3(normalize(v_bitangent), normalize(v_normal), normalize(v_tangent));

            vec3 worldNormal = objectToWorldMatrix * objectNormal;

            vec3 worldIncident = normalize(v_incident);

            vec3 refraction = refract(worldIncident, worldNormal, Eta);
            vec3 reflection = reflect(worldIncident, worldNormal);

            vec4 refractionColor = texture(cubemap, refraction);
            vec4 reflectionColor = texture(cubemap, reflection);

            float fresnel = Eta + (1.0 - Eta) * pow(max(0.0, 1.0 - dot(-worldIncident, worldNormal)), 5.0);

            fragColor = mix(refractionColor, reflectionColor, fresnel);
            }
        </Raw>
    </FragmentShader>
</Shader>